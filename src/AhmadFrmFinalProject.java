/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.*;

/**
 *
 * @author Owner
 */
public class AhmadFrmFinalProject extends javax.swing.JFrame {
    /**
     * Creates new form AhmadFrmFinalProject
     */
    public AhmadFrmFinalProject() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblInst1 = new javax.swing.JLabel();
        lblInst2 = new javax.swing.JLabel();
        txtYear = new javax.swing.JTextField();
        btnPredict = new javax.swing.JButton();
        lblFeedback1 = new javax.swing.JLabel();
        lblPic1 = new javax.swing.JLabel();
        lblPic2 = new javax.swing.JLabel();
        lblFeedback2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        lblTitle.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(0, 108, 194));
        lblTitle.setText("NBA 3 Point Shots Predictor");

        lblInst1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        lblInst1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblInst1.setText("Enter a year from 2019 onwards below and click \"Predict!\" to find");

        lblInst2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        lblInst2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblInst2.setText("out how many 3 point shots will be made in that NBA season:");

        txtYear.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        txtYear.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        btnPredict.setBackground(new java.awt.Color(240, 202, 0));
        btnPredict.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        btnPredict.setText("Predict!");
        btnPredict.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPredict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPredictActionPerformed(evt);
            }
        });

        lblFeedback1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        lblFeedback1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblPic1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stephShooting.png"))); // NOI18N

        lblPic2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/demarShooting.png"))); // NOI18N

        lblFeedback2.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        lblFeedback2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblPic1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(btnPredict, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFeedback1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblFeedback2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(lblPic2))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(77, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblInst1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblInst2, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(75, 75, 75))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblTitle)
                        .addGap(153, 153, 153))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblInst1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblInst2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPic2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblPic1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(btnPredict, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(lblFeedback1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblFeedback2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
    getNumYears
    input: none
    output: int
    This method returns the number of years that the data file has 3-point shot data for.
    */
    public int getNumYears(){
        //Declare and initialize a counter integer to 0
        int n = 0;
        //Declare and initialize a string to store the data file's lines
        String line = "";
        
        try{
            //Initialize a buffered reader to read from "data.txt"
            FileReader file = new FileReader("data.txt");
            BufferedReader buffer = new BufferedReader(file);
            
            //Repeat until a blank line is read
            while(line != null){
                //Read the year line (eg. 2015)
                buffer.readLine();
                //Read the data line (eg. 20953) and store in line
                line = buffer.readLine();
                
                //If the line does not exist, return the counter integer n
                if(line == null){
                    return n;
                }
                //Otherwise add 1 to counter integer n and repeat loop
                else{
                    n ++;
                }
            }
            
            //Close the buffered reader
            buffer.close();
        }
        //Catch IO file exception and display file not found error message
        catch(IOException e){
            lblFeedback1.setText("Data file not found.");
            lblFeedback2.setText("");
        }
        //Return counter integer n
        return n;
    }
    
    /*
    getDataFromFile
    input: int
    output: int[]
    This method reads the past 3-point shot data from the file and stores it in an array
    */
    public int[] getDataFromFile(int n){
        //Declare an integer array to store the past n years 3-point shot values
        int[] num3PntPast = new int[n];
        
        try{
            //Initialize a buffered reader to read from "data.txt"
            FileReader file = new FileReader("data.txt");
            BufferedReader buffer = new BufferedReader(file);
            
            //Repeat n times
            for (int i = 0; i < n; i ++){
                //Read the year line
                buffer.readLine();
                //Initialize num3PntPast[i] to the data value from the data file
                num3PntPast[i] = Integer.parseInt(buffer.readLine());
            }
            
            //Close the buffered reader
            buffer.close();
        }
        //Catch IO file exception and display file not found error message
        catch(IOException e){
            lblFeedback1.setText("Data file not found.");
            lblFeedback2.setText("");
        }
        //Return the array with the data
        return num3PntPast;
    }
    
    /*
    getYearlyChange
    input: int[]
    output: int[]
    This method returns an array with the difference between the 3-point shot data between successive years
    */
    public static int[] getYearlyChange(int[] num3pt){
        /*Declare an integer array of size num3pt.length - 1 to store each change in 3-point shots made from the previous season
        Size n-1 because there will not be a value for the earliest data*/
        int[] yrlyChange = new int[num3pt.length - 1];
        
        //Repeat one less time than the number of elements in the data array
        for (int i = 1; i < num3pt.length; i ++){
            //Declare and initialize integer change to element at index[i] - element at index[i - 1] (previous year)
            int change = num3pt[i] - num3pt[i-1];
            
            //Initialize yrlyChange[i-1] to change
            yrlyChange[i-1] = change;
        }
        
        //Return yrlyChange array
        return yrlyChange;
    }
    
    /*
    getAverage
    input: int[]
    output: double
    This method returns the average (mean) of the elements of the passed array
    */
    public static double getAverage(int[] nums){
        //Declare and initialize double to store total to 0
        double total = 0;
        //Declare a double to store the average
        double average;
        
        //Repeat number of times equal to length of passed array
        for (int i = 0; i < nums.length; i ++){
            //Add the element at index[i] to total
            total += nums[i];
        }
        
        //Initialize average to calculated average
        average = total / nums.length;
        
        //Return average
        return average;
    }
    
    /*
    getPrediction
    input: int, double, final int, int[]
    output: int
    This method returns the predicted number of 3-point shots to be made in a future year
    */
    public static int getPrediction(int year, double avgPerYear, final int lastSeason, int[] pastData){
        //Declare integer prediction to store the predicted number of 3-point shots
        int prediction;
        //Declare  and initialize numYrs to the difference between user-inputted year and the latest NBA year (2018)
        int numYrs = year - lastSeason;
        
        /*Declare and initialize integer additional3Pnts to the average change per year multiplied by the
        number of years in the future that the prediction is for. Round to nearest integer.*/
        int additional3Pnts = (int)Math.round((double)numYrs * avgPerYear);
        
        //Initialize prediction to the number of 3-point shots made in the most recent NBA season + additional3Pnts
        prediction = pastData[pastData.length - 1] + additional3Pnts;
        
        //Return prediction
        return prediction;
    }
    
    /*
    get3PerGame
    input: int, final int
    output: double
    This method returns the average 3-point shots per game to be made in a future NBA season
    */
    public static double get3PerGame(int total, final int numGames){
        //Declare and initialize average to the total 3-point shots divided by the number of games
        double average = (double)total/(double)numGames;
        //Round the average to 1 decimal place
        average = Math.round(average * 10.0) / 10.0;
        
        //Return average
        return average;
    }
    
    private void btnPredictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPredictActionPerformed
        //Declare and initialize an integer storing the latest NBA season year
        final int LATEST_SEASON = 2018;
        //Declare and initialize an integer storing the total number of games in an NBA season
        final int GAMES_PER_SEASON = 1230;
        
        //Declare an integer to store the number of years for which data is available
        int numYearsData;
        //Declare an integer to store the inputted year
        int inputtedYear;
        //Declare an integer to store the predicted number of 3 point shots in the user-inputted NBA season
        int predicted3Pointers;
        
        //Declare a double to store the average change in 3 point shots made with each NBA season
        double averageYearlyChange;
        //Declare a double to store the predicted 3-point shots per game in a future season
        double threesPerGame;
        
        //Initialize numYearsData to the number of years data is available for
        numYearsData = getNumYears();
        
        //Declare and initialize integer array to the number of 3-point shots made in the past NBA seasons from data file
        int[] pastData = new int[numYearsData];
        pastData = getDataFromFile(pastData.length);
        
        //Declare and initialize integer array to the difference between the 3-point shot data between successive years
        int[] yearlyChange = new int[numYearsData - 1];
        yearlyChange = getYearlyChange(pastData);
        
        //Initialize averageYearlyChange to the average of the elements of the yearlyChange array
        averageYearlyChange = getAverage(yearlyChange);
        
        try{
            //Try to parse the user input to an integer
            Integer.parseInt(txtYear.getText());
        }
        //If conversion from string to integer is unsuccessful, display feedback message
        catch(NumberFormatException e){
            lblFeedback1.setText("Please enter a year as a number (eg.\"2021\")");
            lblFeedback2.setText("");
        }
        
        //Initialize inputted to the year inputted by the user
        inputtedYear = Integer.parseInt(txtYear.getText());
        
        //Check if the user inputted year is later than 2018, if not display feedback
        if(inputtedYear <= 2018){
            lblFeedback1.setText("Please enter a year later than 2018 (eg.\"2021\")");
            lblFeedback2.setText("");
        }
        //Otherwise get prediction
        else{
            //Initialize predicted3Pointers to the predicted number of 3-point shots to be made in the inputted future NBA season
            predicted3Pointers = getPrediction(inputtedYear, averageYearlyChange, LATEST_SEASON, pastData);
            //Initialize threesPerGame to the predicted average number of 3-point shots per game
            threesPerGame = get3PerGame(predicted3Pointers, GAMES_PER_SEASON);
            
            //Display the predicted 3-point shots in the future season
            lblFeedback1.setText(predicted3Pointers + " 3-point shots will be made in " + inputtedYear);
            //Display the predicted 3-point shots per game in the future season
            lblFeedback2.setText("for an average of " + threesPerGame + " 3-point shots per game.");
        }
    }//GEN-LAST:event_btnPredictActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AhmadFrmFinalProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AhmadFrmFinalProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AhmadFrmFinalProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AhmadFrmFinalProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AhmadFrmFinalProject().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPredict;
    private javax.swing.JLabel lblFeedback1;
    private javax.swing.JLabel lblFeedback2;
    private javax.swing.JLabel lblInst1;
    private javax.swing.JLabel lblInst2;
    private javax.swing.JLabel lblPic1;
    private javax.swing.JLabel lblPic2;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
}
